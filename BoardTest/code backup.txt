#include "PinDefinitions.h"
#include "ConstantDefinitions.h"

#include <Arduino.h>
#include <Wire.h>
#include <math.h> // For sine function
#include <Adafruit_ADS1X15.h>

//Arduino_GFX setting
#include "Arduino_DataBus.h"
#include "databus/Arduino_ESP32SPI.h"
#include "databus/Arduino_Wire.h"
#include "Arduino_GFX.h"
#include "display/Arduino_GC9A01.h"


// Create an ADS1115 object
Adafruit_ADS1115 ads_joystick;
bool ads_joystick_initialized = false;

//Arduino_GFX setting
Arduino_DataBus *bus = new Arduino_ESP32SPI(TFT_DC, TFT_CS, TFT_SCK, TFT_MOSI, TFT_MISO, HSPI /* spi_num */);
Arduino_GFX *gfx = new Arduino_GC9A01(bus, TFT_RST, 0 /* rotation */, true /* IPS */);
bool lcd_initialized = false;


bool requestShutdown = false;


//display variables
static int16_t w, h, center;
static int16_t hHandLen, mHandLen, sHandLen, markLen;
static float sdeg, mdeg, hdeg;
static int16_t osx = 0, osy = 0, omx = 0, omy = 0, ohx = 0, ohy = 0; // Saved H, M, S x & y coords
static int16_t nsx, nsy, nmx, nmy, nhx, nhy;                         // H, M, S x & y coords
static int16_t xMin, yMin, xMax, yMax;                               // redraw range
static int16_t hh, mm, ss;
static unsigned long targetTime; // next action time

static int16_t *cached_points;
static uint16_t cached_points_idx = 0;
static int16_t *last_cached_point;


// animation variables
bool isAnimating = false;         // Flag to indicate animation state
unsigned long animationStartTime; // Time when animation starts
unsigned long animationDuration;  // Duration of the animation
int animationStartLevel;          // Starting brightness level
int animationEndLevel;            // Ending brightness level



void setup() 
{
  Serial.begin(115200); // Start Serial communication

  //Wire.begin(I2C_SDA, I2C_SCL); //Specify SDA and SCL pins for I2C
  
  // Initialize pins
  initializePins();
}

void initializePins() 
{
  // Initialize pins
  pinMode(CAR_KEY_SWITCH, INPUT_PULLUP);
  pinMode(MOSFET_48V, OUTPUT);
  pinMode(VOLTMETER_SPEED, OUTPUT);
  pinMode(VOLTMETER_CHARGING, OUTPUT);
  pinMode(VOLTMETER_BATTERY, OUTPUT);

  pinMode(GFX_BL, OUTPUT);

  pinMode(LED_BUILTIN, OUTPUT);
}

void loop() 
{
  //handle carKeySwitch 
  handleCarKeySwitch();

  
  // Read joystick position from ADS1115 A2 pin and map it to the voltmeter
  if( ads_joystick_initialized )
  {
    setVoltmeterVoltage(VOLTMETER_SPEED, readJoystick( 2 ) );
    setVoltmeterVoltage(VOLTMETER_CHARGING, readJoystick( 1 ) );
    setVoltmeterVoltage(VOLTMETER_BATTERY, readJoystick( 0 ) );

    Serial.println( "2,"  + readJoystick( 2 ) );
    Serial.println( "1, " + readJoystick( 1 ) );
    Serial.println( "0, " + readJoystick( 0 ) );

    
    if( lcd_initialized )
    {
      //loopLCD();
      //updateBrightnessAnimation();
    }
  }

  //checkShutDown();
}

void checkShutDown()
{
  if( requestShutdown)
  {
    if( !isAnimating )
    {
      doShutDown();
    }
  }
}

void doShutDown()
{
    ads_joystick_initialized = false;
    setVoltmeterVoltage(VOLTMETER_SPEED, 0 );
    setVoltmeterVoltage(VOLTMETER_CHARGING, 0 );
    setVoltmeterVoltage(VOLTMETER_BATTERY, 0 );
    delay(50);
    lcd_initialized = false;
    digitalWrite(MOSFET_48V, LOW);

    requestShutdown = false;
}

// Function to read joystick value from ADS1115 A2 pin and map to PWM
int readJoystick( int adcPin ) {
  // Read ADC value (16-bit signed integer, -32768 to 32767)
  int16_t rawValue = ads_joystick.readADC_SingleEnded( adcPin );

  // Convert raw ADC value to PWM range (0-255)
  // ADS1115 range: 0-32767 maps to 0-3.3V
  int pwmValue = map(rawValue, 0, 32767, 0, PWM_RESOLUTION);

  // Ensure PWM value is within the valid range
  pwmValue = constrain(pwmValue, 0, PWM_RESOLUTION);

  return pwmValue;
}



// Function to handle carKeySwitch 
void handleCarKeySwitch()
{
  // Declare a static variable to store the previous state of the car key switch
  static int previousCarKeySwitchState = LOW;

  // Read the current state of the car key switch
  int carKeySwitchState = digitalRead(CAR_KEY_SWITCH);

  // Check if the state has changed
  if (carKeySwitchState != previousCarKeySwitchState) 
  {
    // Update the MOSFET_48V pin only if the state has changed
    if (carKeySwitchState == LOW) 
    {
      digitalWrite(MOSFET_48V, HIGH); 
      
      
      while( !ads_joystick.begin(0x4A) )
      {
        ads_joystick_initialized = true;
        ads_joystick.setGain(GAIN_ONE); 

        //setupLCD();
        setBrightness(0);
        startBrightnessAnimation(0, 255, 500);
        
      }
      
    } 
    else 
    {
      if( ads_joystick_initialized && lcd_initialized )
      {
        requestShutdown = true;
        startBrightnessAnimation(255, 0, 500);
      }
    }

    // Update the previous state
    previousCarKeySwitchState = carKeySwitchState;

     digitalWrite(LED_BUILTIN, carKeySwitchState);
  }
}
  

void setVoltmeterVoltage(int pin, int pwmValue) {
  // Ensure the PWM value is within the valid range
  if (pwmValue < 0) pwmValue = 0;
  if (pwmValue > 255) pwmValue = 255; // Maximum PWM value for 8-bit resolution

  // Write the PWM value to the specified pin
  analogWrite(pin, pwmValue);
}




static uint8_t conv2d(const char *p)
{
  uint8_t v = 0;
  return (10 * (*p - '0')) + (*++p - '0');
}


// Function to set brightness
void setBrightness(int level) {
    analogWrite(GFX_BL, constrain(level, 0, 255)); // Ensure level stays within 0-255
}

// Function to start the brightness animation
void startBrightnessAnimation(int startLevel, int endLevel, unsigned long duration)
{
    if( !lcd_initialized )
      return;

    animationStartTime = millis();       // Record the start time
    animationDuration = duration;        // Set animation duration
    animationStartLevel = startLevel;    // Set starting brightness
    animationEndLevel = endLevel;        // Set ending brightness
    isAnimating = true;                  // Set animation flag
    setBrightness(startLevel);           // Initialize brightness
}

// Function to update the animation (call in loop)
void updateBrightnessAnimation() 
{
    if (!isAnimating || !lcd_initialized)
      return; // Exit if no animation is active

    unsigned long currentTime = millis();
    unsigned long elapsedTime = currentTime - animationStartTime;

    if (elapsedTime >= animationDuration) {
        // Animation finished
        setBrightness(animationEndLevel); // Set to final brightness
        isAnimating = false;              // Reset animation flag
    } else {
        // Animation in progress
        float t = (float)elapsedTime / (float)animationDuration; // Normalized time (0.0 to 1.0)
        float easedT = t * t;                                   // Quadratic easing
        int currentBrightness = animationStartLevel + (animationEndLevel - animationStartLevel) * easedT;
        setBrightness(currentBrightness);
    }
}

void setupLCD()
{
  Serial.println("Arduino_GFX Clock example");

  #ifdef GFX_EXTRA_PRE_INIT
    GFX_EXTRA_PRE_INIT();
  #endif
  
  // Init Display
  while (!gfx->begin())
  {
    Serial.println("gfx->begin() failed!");
  }

  lcd_initialized = true;


  
  gfx->fillScreen(BACKGROUND);


  
  


  // init LCD constant
  w = gfx->width();
  h = gfx->height();
  if (w < h)
  {
    center = w / 2;
  }
  else
  {
    center = h / 2;
  }
  hHandLen = center * 3 / 8;
  mHandLen = center * 2 / 3;
  sHandLen = center * 5 / 6;
  markLen = sHandLen / 6;
  cached_points = (int16_t *)malloc((hHandLen + 1 + mHandLen + 1 + sHandLen + 1) * 2 * 2);

  // Draw 60 clock marks
  draw_round_clock_mark(
      // draw_square_clock_mark(
      center - markLen, center,
      center - (markLen * 2 / 3), center,
      center - (markLen / 2), center);

  hh = conv2d(__TIME__);
  mm = conv2d(__TIME__ + 3);
  ss = conv2d(__TIME__ + 6);

  targetTime = ((millis() / 1000) + 1) * 1000;
}

void loopLCD()
{
  unsigned long cur_millis = millis();
  if (cur_millis >= targetTime)
  {
    targetTime += 1000;
    ss++; // Advance second
    if (ss == 60)
    {
      ss = 0;
      mm++; // Advance minute
      if (mm > 59)
      {
        mm = 0;
        hh++; // Advance hour
        if (hh > 23)
        {
          hh = 0;
        }
      }
    }
  }

  // Pre-compute hand degrees, x & y coords for a fast screen update
  sdeg = SIXTIETH_RADIAN * ((0.001 * (cur_millis % 1000)) + ss); // 0-59 (includes millis)
  nsx = cos(sdeg - RIGHT_ANGLE_RADIAN) * sHandLen + center;
  nsy = sin(sdeg - RIGHT_ANGLE_RADIAN) * sHandLen + center;
  if ((nsx != osx) || (nsy != osy))
  {
    mdeg = (SIXTIETH * sdeg) + (SIXTIETH_RADIAN * mm); // 0-59 (includes seconds)
    hdeg = (TWELFTH * mdeg) + (TWELFTH_RADIAN * hh);   // 0-11 (includes minutes)
    mdeg -= RIGHT_ANGLE_RADIAN;
    hdeg -= RIGHT_ANGLE_RADIAN;
    nmx = cos(mdeg) * mHandLen + center;
    nmy = sin(mdeg) * mHandLen + center;
    nhx = cos(hdeg) * hHandLen + center;
    nhy = sin(hdeg) * hHandLen + center;

    // redraw hands
    redraw_hands_cached_draw_and_erase();

    ohx = nhx;
    ohy = nhy;
    omx = nmx;
    omy = nmy;
    osx = nsx;
    osy = nsy;

  }
}

void draw_round_clock_mark(int16_t innerR1, int16_t outerR1, int16_t innerR2, int16_t outerR2, int16_t innerR3, int16_t outerR3)
{
  float x, y;
  int16_t x0, x1, y0, y1, innerR, outerR;
  uint16_t c;

  for (uint8_t i = 0; i < 60; i++)
  {
    if ((i % 15) == 0)
    {
      innerR = innerR1;
      outerR = outerR1;
      c = MARK_COLOR;
    }
    else if ((i % 5) == 0)
    {
      innerR = innerR2;
      outerR = outerR2;
      c = MARK_COLOR;
    }
    else
    {
      innerR = innerR3;
      outerR = outerR3;
      c = SUBMARK_COLOR;
    }

    mdeg = (SIXTIETH_RADIAN * i) - RIGHT_ANGLE_RADIAN;
    x = cos(mdeg);
    y = sin(mdeg);
    x0 = x * outerR + center;
    y0 = y * outerR + center;
    x1 = x * innerR + center;
    y1 = y * innerR + center;

    gfx->drawLine(x0, y0, x1, y1, c);
  }
}

void draw_square_clock_mark(int16_t innerR1, int16_t outerR1, int16_t innerR2, int16_t outerR2, int16_t innerR3, int16_t outerR3)
{
  float x, y;
  int16_t x0, x1, y0, y1, innerR, outerR;
  uint16_t c;

  for (uint8_t i = 0; i < 60; i++)
  {
    if ((i % 15) == 0)
    {
      innerR = innerR1;
      outerR = outerR1;
      c = MARK_COLOR;
    }
    else if ((i % 5) == 0)
    {
      innerR = innerR2;
      outerR = outerR2;
      c = MARK_COLOR;
    }
    else
    {
      innerR = innerR3;
      outerR = outerR3;
      c = SUBMARK_COLOR;
    }

    if ((i >= 53) || (i < 8))
    {
      x = tan(SIXTIETH_RADIAN * i);
      x0 = center + (x * outerR);
      y0 = center + (1 - outerR);
      x1 = center + (x * innerR);
      y1 = center + (1 - innerR);
    }
    else if (i < 23)
    {
      y = tan((SIXTIETH_RADIAN * i) - RIGHT_ANGLE_RADIAN);
      x0 = center + (outerR);
      y0 = center + (y * outerR);
      x1 = center + (innerR);
      y1 = center + (y * innerR);
    }
    else if (i < 38)
    {
      x = tan(SIXTIETH_RADIAN * i);
      x0 = center - (x * outerR);
      y0 = center + (outerR);
      x1 = center - (x * innerR);
      y1 = center + (innerR);
    }
    else if (i < 53)
    {
      y = tan((SIXTIETH_RADIAN * i) - RIGHT_ANGLE_RADIAN);
      x0 = center + (1 - outerR);
      y0 = center - (y * outerR);
      x1 = center + (1 - innerR);
      y1 = center - (y * innerR);
    }
    gfx->drawLine(x0, y0, x1, y1, c);
  }
}

void redraw_hands_cached_draw_and_erase()
{
  gfx->startWrite();
  draw_and_erase_cached_line(center, center, nsx, nsy, SECOND_COLOR, cached_points, sHandLen + 1, false, false);
  draw_and_erase_cached_line(center, center, nhx, nhy, HOUR_COLOR, cached_points + ((sHandLen + 1) * 2), hHandLen + 1, true, false);
  draw_and_erase_cached_line(center, center, nmx, nmy, MINUTE_COLOR, cached_points + ((sHandLen + 1 + hHandLen + 1) * 2), mHandLen + 1, true, true);
  gfx->endWrite();
}

void draw_and_erase_cached_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t color, int16_t *cache, int16_t cache_len, bool cross_check_second, bool cross_check_hour)
{
#if defined(ESP8266)
  yield();
#endif
  bool steep = _diff(y1, y0) > _diff(x1, x0);
  if (steep)
  {
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  int16_t dx, dy;
  dx = _diff(x1, x0);
  dy = _diff(y1, y0);

  int16_t err = dx / 2;
  int8_t xstep = (x0 < x1) ? 1 : -1;
  int8_t ystep = (y0 < y1) ? 1 : -1;
  x1 += xstep;
  int16_t x, y, ox, oy;
  for (uint16_t i = 0; i <= dx; i++)
  {
    if (steep)
    {
      x = y0;
      y = x0;
    }
    else
    {
      x = x0;
      y = y0;
    }
    ox = *(cache + (i * 2));
    oy = *(cache + (i * 2) + 1);
    if ((x == ox) && (y == oy))
    {
      if (cross_check_second || cross_check_hour)
      {
        write_cache_pixel(x, y, color, cross_check_second, cross_check_hour);
      }
    }
    else
    {
      write_cache_pixel(x, y, color, cross_check_second, cross_check_hour);
      if ((ox > 0) || (oy > 0))
      {
        write_cache_pixel(ox, oy, BACKGROUND, cross_check_second, cross_check_hour);
      }
      *(cache + (i * 2)) = x;
      *(cache + (i * 2) + 1) = y;
    }
    if (err < dy)
    {
      y0 += ystep;
      err += dx;
    }
    err -= dy;
    x0 += xstep;
  }
  for (uint16_t i = dx + 1; i < cache_len; i++)
  {
    ox = *(cache + (i * 2));
    oy = *(cache + (i * 2) + 1);
    if ((ox > 0) || (oy > 0))
    {
      write_cache_pixel(ox, oy, BACKGROUND, cross_check_second, cross_check_hour);
    }
    *(cache + (i * 2)) = 0;
    *(cache + (i * 2) + 1) = 0;
  }
}

void write_cache_pixel(int16_t x, int16_t y, int16_t color, bool cross_check_second, bool cross_check_hour)
{
  int16_t *cache = cached_points;
  if (cross_check_second)
  {
    for (uint16_t i = 0; i <= sHandLen; i++)
    {
      if ((x == *(cache++)) && (y == *(cache)))
      {
        return;
      }
      cache++;
    }
  }
  if (cross_check_hour)
  {
    cache = cached_points + ((sHandLen + 1) * 2);
    for (uint16_t i = 0; i <= hHandLen; i++)
    {
      if ((x == *(cache++)) && (y == *(cache)))
      {
        return;
      }
      cache++;
    }
  }
  gfx->writePixel(x, y, color);
}

